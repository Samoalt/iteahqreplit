
import { Bid } from "@/types/bid"

export interface FileUploadOptions {
  category: 'contract' | 'compliance' | 'certificate' | 'delivery' | 'payment' | 'other'
  bidId: string
  file: File
}

export interface ReportGenerationOptions {
  bidId: string
  reportType: 'eslip' | 'payment' | 'split' | 'payout' | 'summary' | 'compliance'
  format: 'pdf' | 'excel' | 'csv'
}

export const validateFileUpload = (file: File): { valid: boolean; error?: string } => {
  const maxSize = 10 * 1024 * 1024 // 10MB
  const allowedTypes = [
    'application/pdf',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'image/jpeg',
    'image/png',
    'image/gif',
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
  ]

  if (file.size > maxSize) {
    return { valid: false, error: 'File size must be less than 10MB' }
  }

  if (!allowedTypes.includes(file.type)) {
    return { valid: false, error: 'File type not supported' }
  }

  return { valid: true }
}

export const generateFileName = (bidId: string, type: string, extension: string): string => {
  const timestamp = new Date().toISOString().split('T')[0]
  return `${bidId}-${type}-${timestamp}.${extension}`
}

export const createBlobDownload = (content: string, filename: string, mimeType: string = 'text/plain') => {
  const blob = new Blob([content], { type: mimeType })
  const url = URL.createObjectURL(blob)
  
  const link = document.createElement('a')
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}

export const generateESlipContent = (bid: Bid): string => {
  return `E-SLIP DOCUMENT
==================

Bid ID: ${bid.id}
Buyer: ${bid.buyerName}
Amount: $${bid.amount.toLocaleString()}
Factory: ${bid.factory}
Grade: ${bid.grade}
Quantity: ${bid.quantity} kg
Rate: $${bid.pricePerKg}/kg

Issue Date: ${new Date().toLocaleDateString()}
Valid Until: ${new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString()}

Terms & Conditions:
- Cash on Delivery
- Ex-Warehouse pricing
- Quality as per sample
- Delivery within 7 days

Generated by: Tea Auction Management System
Generated on: ${new Date().toLocaleString()}
`
}

export const generatePaymentReportContent = (bid: Bid): string => {
  return `PAYMENT REPORT
===============

Bid Information:
- Bid ID: ${bid.id}
- Buyer: ${bid.buyerName}
- Total Amount: $${bid.amount.toLocaleString()}

Payment Status: ${bid.paymentDetails?.status || 'Pending'}
Expected Amount: $${bid.paymentDetails?.expectedAmount?.toLocaleString() || bid.amount.toLocaleString()}
Received Amount: $${bid.paymentDetails?.receivedAmount?.toLocaleString() || '0'}
Outstanding: $${((bid.paymentDetails?.expectedAmount || bid.amount) - (bid.paymentDetails?.receivedAmount || 0)).toLocaleString()}

Payment Method: ${bid.paymentDetails?.paymentMethod || 'Not specified'}
Reference Number: ${bid.paymentDetails?.referenceNumber || 'Not provided'}
Received Date: ${bid.paymentDetails?.receivedDate || 'Not received'}

Generated on: ${new Date().toLocaleString()}
`
}

export const generateSplitReportContent = (bid: Bid): string => {
  const totalAmount = bid.amount
  const factoryAmount = totalAmount * 0.85
  const brokerAmount = totalAmount * 0.03
  const teaBoardAmount = totalAmount * 0.02
  const otherAmount = totalAmount * 0.10

  return `SPLIT PROCESSING REPORT
========================

Bid ID: ${bid.id}
Total Amount: $${totalAmount.toLocaleString()}

Split Breakdown:
- Factory Payment: $${factoryAmount.toFixed(2)} (85%)
- Broker Commission: $${brokerAmount.toFixed(2)} (3%)
- Tea Board Fee: $${teaBoardAmount.toFixed(2)} (2%)
- Other Charges: $${otherAmount.toFixed(2)} (10%)

Beneficiaries:
${bid.splitDetails?.beneficiaries?.map(b => 
  `- ${b.name}: ${b.percentage ? b.percentage + '%' : '$' + b.fixedAmount} (${b.status})`
).join('\n') || 'No beneficiaries defined'}

Status: ${bid.splitDetails ? 'Processed' : 'Pending'}
Generated on: ${new Date().toLocaleString()}
`
}

export const generatePayoutReportContent = (bid: Bid): string => {
  return `PAYOUT APPROVAL REPORT
=======================

Bid ID: ${bid.id}
Buyer: ${bid.buyerName}
Total Amount: $${bid.amount.toLocaleString()}

Payout Status: ${bid.payoutDetails?.status || 'Pending'}
Reviewed By: ${bid.payoutDetails?.reviewedBy || 'Not reviewed'}
Reviewed Date: ${bid.payoutDetails?.reviewedDate || 'Not reviewed'}
Approved By: ${bid.payoutDetails?.approvedBy || 'Not approved'}
Approved Date: ${bid.payoutDetails?.approvedDate || 'Not approved'}

Payout Instructions:
${bid.payoutDetails?.payoutInstructionPdf ? 'PDF generated' : 'Pending generation'}

Payout Summary:
${bid.payoutDetails?.payoutSummaryExcel ? 'Excel generated' : 'Pending generation'}

Generated on: ${new Date().toLocaleString()}
`
}

export const generateComplianceReportContent = (bid: Bid): string => {
  return `COMPLIANCE REPORT
==================

Bid ID: ${bid.id}
Factory: ${bid.factory}
Grade: ${bid.grade}

Quality Details:
- Moisture Level: ${bid.qualityDetails?.moistureLevel || 'Not tested'}
- Color & Aroma: ${bid.qualityDetails?.colorAroma || 'Not evaluated'}
- Tasting Notes: ${bid.qualityDetails?.tastingNotes || 'Not available'}
- Inspection Report: ${bid.qualityDetails?.inspectionReport || 'Pending'}

Tea Type: ${bid.teaType || 'Not specified'}
Origin Factory: ${bid.originFactory || bid.factory}
Packaging Type: ${bid.packagingType || 'Standard'}
Auction Date: ${bid.auctionDate || 'Not specified'}
Warehouse Location: ${bid.warehouseLocation || 'Main Warehouse'}

Documents Status:
${bid.documents?.map(doc => 
  `- ${doc.filename} (${doc.category}) - Uploaded by ${doc.uploadedBy}`
).join('\n') || 'No documents uploaded'}

Generated on: ${new Date().toLocaleString()}
`
}

export const printDocument = (content: string, title: string) => {
  const printWindow = window.open('', '_blank')
  if (printWindow) {
    printWindow.document.write(`
      <html>
        <head>
          <title>${title}</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              margin: 20px;
              line-height: 1.6;
            }
            h1, h2 {
              color: #333;
              border-bottom: 2px solid #ccc;
              padding-bottom: 5px;
            }
            pre {
              background-color: #f5f5f5;
              padding: 15px;
              border-radius: 5px;
              white-space: pre-wrap;
            }
            @media print {
              body { margin: 0; }
            }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          <pre>${content}</pre>
        </body>
      </html>
    `)
    printWindow.document.close()
    printWindow.print()
  }
}
